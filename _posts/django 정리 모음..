## django란

`웹 프레임워크` - 웹 애플리케이션에서 비슷한 부분들을 모아 놓은것.
 필요한 기능들의 뼈대를 모아놓은 것
 
django는 python으로 동작하며, 대부분의 기능들을 뼈대로 구성해 둠.

`Flask` -  외부 라이브러리를 가져다 만들어야 함.


## django 프로젝트 생성

+ 가상환경에서 `django-admin startproject @@` 입력하여 장고 프로젝트 생성

+ 생성된 프로젝트의 초기 구조는

```
@@
|___ manage.py
|___@@
		settings.py
		urls.py
		wsgi.py
		__init__,py

```

+ manage.py : 사이트 관리 및 웹 서버 실행

+ settings.py : 웹 사이트 설정

+ urls.py : urlresolver가 사용하는 패턴 목록 포함

### Django view

+ 어플리케이션의 로직을 넣는 곳

+ 모델의 정보를 받아와서 `템플릿`에 전달하는 역할

### 템플릿(HTML)

+ 서로 다른 정보를 일정한 형태로 표시할 수 있는 재사용이 가능한 파일

### Django ORM & QuerySets

+ 쿼리셋 : 전달받은 모델의 객체 목록, 데이터베이스의 데이터를 읽어 필터 및 정렬 가능

+ 사용방법


### Django 관련 팁 모음

+ Pip freeze > requirements.txt - 필요한 패키지/버전들을 기록하는 방법

+ pip install -r requirement.txt - 필요한 패키지/버전들을 기록된 대로 설치.


Refactor – rename - 패키지 폴더에서 전체적으로 rename을 해 주면서 참조name을 정확히 확인하며 바꾸어야한다.

Django application 폴더가 항상 root폴더여야 한다.

Python manage.py migrate - 장고 기본 테이블 설정

///
장고 애플리케이션/ 장고가 다루는 패키지 단위 애플리케이션 - 둘은 다르다.

Django – auth(인증)  애플리케이션- user(테이블)


client – request – server

url pot – django apps - url별로 각기 apps가 달라진다.
Url resolver – urls 모듈

## MVC 모델과 MTV 모델

MVC pattern

Model – View – Controll pattern

Model – Data
View – 사용자에게 제공되는 화면(또는 기능)
Controller - 모델과 뷰 사이에서 데이터를 가공하는 역할, ← urlresolver에 연결. 

1. 사용자의 요청이 server에 도달

2. server는 해당 요청 url을 django에 전달

3. django는 전달받은 url을 urlresolver로 분석해서 작업을 처리할 controller에 연결

4. controller는 요청을 받아 사용자에게 제공할 View를 응답으로 리턴

5. server는 리턴받은 응답을 사용자에게 전달.

MTV pattern(Django)
Model - Data(DB)
Template(view) - HTML
View(controller) – python function
